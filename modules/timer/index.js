const dayjs = require('dayjs');
const joke = require('../joke');
const customParseFormat = require('dayjs/plugin/customParseFormat');
const subscriber = require("../../database/models/subscribers");

dayjs.extend(customParseFormat);

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {string} startTime - –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "DD-MM-YYYY"
 * @param {string} type - –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö (command –∏–ª–∏ mailer)
 * @param {import('vk-io').VK} [vk] - –≠–∫–∑–µ–º–ø–ª—è—Ä VK API (—Ç–æ–ª—å–∫–æ –¥–ª—è type === 'mailer')
 * @returns {Object}
 */
async function getServeTime(startTime, type) {
    const startDate = dayjs(startTime, "DD-MM-YYYY", 'ru', true);
    const endDate = startDate.add(1, 'year');
    const subscribersCount = await subscriber.count()
    let data;
    switch (type) {
        case 'command': {
            let data = {
                startDate: startDate.format('DD-MM-YYYY'), //–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
                endDate: endDate.format('DD-MM-YYYY'),//–î–∞—Ç–∞ –∫–æ–Ω—Ü–∞
                totalDays: endDate.diff(startDate, 'day'),  // –î–Ω–µ–π –≤—Å–µ–≥–æ
                daysPassed: dayjs().diff(startDate, 'day'),  // –î–Ω–µ–π –ø—Ä–æ—à–ª–æ
                daysLeft: endDate.diff(dayjs(), 'day'), //–î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å
                progressGraphical: generateProgressBar((dayjs().diff(startDate, 'day') / endDate.diff(startDate, 'day') * 100).toFixed(4)),
                subscribers: subscribersCount //–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤

            }

            return data;

        }
        case 'mailer': {
            let data = {
                daysPassed: dayjs().diff(startDate, 'day'),  // –î–Ω–µ–π –ø—Ä–æ—à–ª–æ
                daysLeft: endDate.diff(dayjs(), 'day'), //–î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å
                progressGraphical: generateProgressBar((dayjs().diff(startDate, 'day') / endDate.diff(startDate, 'day') * 100).toFixed(4)),
                joke: await joke.getJoke() // –†–∂–æ–º–±–∞
            }
            return data;
        }
    }

    return data
}

function generateProgressBar(percentage) {
    percentage = Math.min(percentage, 100);  // –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º percentage –∑–Ω–∞—á–µ–Ω–∏–µ–º 100

    const progressBarLength = 14;
    const progressBarFilled = Math.floor(percentage / (100 / progressBarLength));
    const progressBarEmpty = progressBarLength - progressBarFilled;

    let progressBar = '';
    for (let i = 0; i < progressBarFilled; i++) {
        progressBar += 'üü©';
    }
    for (let i = 0; i < progressBarEmpty; i++) {
        progressBar += '‚¨ú';
    }

    return `[${progressBar}] ${percentage}%`;
}

module.exports = { getServeTime };